<?xml version="1.0" encoding="UTF-8"?>

<!--
   Copyright (c) 2009, 2024 Mountainminds GmbH & Co. KG and Contributors
   This program and the accompanying materials are made available under
   the terms of the Eclipse Public License 2.0 which is available at
   http://www.eclipse.org/legal/epl-2.0

   SPDX-License-Identifier: EPL-2.0

-->

<project name="Example Ant Build with JaCoCo Offline Instrumentation" default="rebuild" xmlns:jacoco="antlib:org.jacoco.ant">

	<description>
	  Example Ant build file that demonstrates how JaCoCo can be used with
	  offline instrumentation. This requires preprocessing of the class files
	  before the test is launched and adding the JaCoCo agent to the classpath.
	</description>

	<property name="src.dir" location="./src" />
	<property name="test.dir" location="./test" />

	<property name="result.dir" location="./target" />
	<property name="result.classes.dir" location="${result.dir}/classes" />
	<property name="result.classes.instr.dir" location="${result.dir}/classes-instr" />
	<property name="result.report.dir" location="${result.dir}/site/jacoco" />
	<property name="result.exec.file" location="${result.dir}/jacoco.exec" />

	
	 <path id="ant_junit_classpath">
	 	 <pathelement location="lib/org.junit_4.13.2.v20211018-1956.jar"/>
	     <pathelement location="lib/org.hamcrest.core_1.3.0.v20180420-1519.jar"/>
	 </path>
	
	
	<path id="compile_classpath">
		<path refid="ant_junit_classpath"/>
		<pathelement location="${result.classes.dir}"/>
	</path>
	
	<!-- Step 1: Import JaCoCo Ant tasks -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="./lib/jacocoant.jar" />
	</taskdef>

	<target name="clean">
		<delete dir="${result.dir}" />
	</target>

	<target name="compile">
		<mkdir dir="${result.classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${result.classes.dir}" debug="true" includeantruntime="false">
			<classpath refid = "compile_classpath"/>
		</javac>
		<javac srcdir="${test.dir}" destdir="${result.classes.dir}" debug="true" includeantruntime="false">
			<classpath refid = "compile_classpath"/>
		</javac>
	</target>

	
	<target name="junitreport">
			     <junit fork="yes" printsummary="withOutAndErr" haltonfailure="false" forkmode="once" >
			     	<formatter type="xml"/>   
			     	<test name="ant_junit.SuiteTests" todir="junit"/>
			     	 <classpath refid = "compile_classpath"/>
			     </junit>
					 <junitreport todir="junit">
						     <fileset dir="junit">
						<include name="TEST-*.xml"/>
						</fileset>
						<report format="frames" todir="junit"/>
						</junitreport>
						<fail message="Tests failed. Check log and/or reports."
						if="test.failed"/>
			</target>
	
	<target name="instrument" depends="compile">
		<!-- Step 2: Instrument class files -->
		<jacoco:instrument destdir="${result.classes.instr.dir}">
			<fileset dir="${result.classes.dir}" />
		</jacoco:instrument>
		
	</target>

	<target name="test" depends="instrument">
		<jacoco:coverage destfile="target/jacoco.exec">
	     <junit fork="yes" printsummary="withOutAndErr" haltonfailure="false" forkmode="once" >
	     	<test name="ant_junit.SuiteTests" todir="${result.report.dir}"/>
	     	 <classpath refid = "compile_classpath"/>
	     </junit>
			
		</jacoco:coverage>
	</target>
	
	
	
	<target name="report" depends="test">
		<!-- Step 4: Create coverage report -->
		<jacoco:report>

			<!-- This task needs the collected execution data and ... -->
			<executiondata>
				<file file="${result.exec.file}" />
			</executiondata>

			<!-- the class files and optional source files ... -->
			<structure name="JaCoCo Ant Example">
				<classfiles>
					<fileset dir="${result.classes.dir}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}" />
				</sourcefiles>
			</structure>

			<!-- to produce reports in different formats. -->
			<html destdir="${result.report.dir}" />
			<csv destfile="${result.report.dir}/report.csv" />
			<xml destfile="${result.report.dir}/report.xml" />
		</jacoco:report>
	</target>

	<target name="rebuild" depends="clean,compile,junitreport, instrument,test,report" />

</project>
